<?php

namespace App\Filament\Resources\OrderResource\Pages;

use App\Filament\Resources\OrderResource;
use App\Models\Product;
use Filament\Pages\Actions;
use Filament\Pages\Actions\Action;
use Filament\Resources\Pages\EditRecord;
use Illuminate\Database\Eloquent\Model;

class EditOrder extends EditRecord
{
    protected static string $resource = OrderResource::class;

    protected static ?string $title = "Buyurtmani o'zgartirish";

    protected function mutateFormDataBeforeFill(array $data): array
    {
        $order = $this->record;
        $order->load('items');
        $storedRecords = $order->getRelation('items');
        foreach ($storedRecords as $item){
            $item->category_id = $item->product->category_id;
        }

        $storedItems = $storedRecords->pick('category_id', 'product_id','price',  'quantity');

        if (count($storedItems) > 0){
            $data['items'] = $storedItems;
        }

        return parent::mutateFormDataBeforeFill($data); // TODO: Change the autogenerated stub
    }

    protected function getSubmitFormAction(): Action
    {

        return parent::getSubmitFormAction(); // TODO: Change the autogenerated stub
    }

    protected function handleRecordUpdate(Model $record, array $data): Model
    {
        $record->items()->delete();
        foreach ($data['items'] as $key => $item){
            $itemProduct = Product::find($item['product_id']);
            if ($itemProduct){
                $record->items()->create([
                    'order_id' => $record->id,
                    'product_id' => $item['product_id'],
                    'quantity' => $item['quantity'],
                    'price' => $itemProduct->price,
                ]);
            }
        }
        return parent::handleRecordUpdate($record, $data); // TODO: Change the autogenerated stub
    }

    protected function getActions(): array
    {
        return [
            Actions\ViewAction::make(),
            Actions\DeleteAction::make(),
        ];
    }
}
